// Generated by view binder compiler. Do not edit!
package org.satochip.satodimeapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.satochip.satodimeapp.R;

public final class ActivitySettingsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView backBtn;

  @NonNull
  public final LinearLayout connectedCardLayout;

  @NonNull
  public final Spinner currecySpinner;

  @NonNull
  public final SwitchCompat darkTheme;

  @NonNull
  public final Spinner languageSpinner;

  @NonNull
  public final ImageView menuBtn;

  @NonNull
  public final LinearLayout okBtn;

  @NonNull
  public final CardView toolbar;

  private ActivitySettingsBinding(@NonNull RelativeLayout rootView, @NonNull ImageView backBtn,
      @NonNull LinearLayout connectedCardLayout, @NonNull Spinner currecySpinner,
      @NonNull SwitchCompat darkTheme, @NonNull Spinner languageSpinner, @NonNull ImageView menuBtn,
      @NonNull LinearLayout okBtn, @NonNull CardView toolbar) {
    this.rootView = rootView;
    this.backBtn = backBtn;
    this.connectedCardLayout = connectedCardLayout;
    this.currecySpinner = currecySpinner;
    this.darkTheme = darkTheme;
    this.languageSpinner = languageSpinner;
    this.menuBtn = menuBtn;
    this.okBtn = okBtn;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back_btn;
      ImageView backBtn = rootView.findViewById(id);
      if (backBtn == null) {
        break missingId;
      }

      id = R.id.connected_card_layout;
      LinearLayout connectedCardLayout = rootView.findViewById(id);
      if (connectedCardLayout == null) {
        break missingId;
      }

      id = R.id.currecy_spinner;
      Spinner currecySpinner = rootView.findViewById(id);
      if (currecySpinner == null) {
        break missingId;
      }

      id = R.id.dark_theme;
      SwitchCompat darkTheme = rootView.findViewById(id);
      if (darkTheme == null) {
        break missingId;
      }

      id = R.id.language_spinner;
      Spinner languageSpinner = rootView.findViewById(id);
      if (languageSpinner == null) {
        break missingId;
      }

      id = R.id.menu_btn;
      ImageView menuBtn = rootView.findViewById(id);
      if (menuBtn == null) {
        break missingId;
      }

      id = R.id.ok_btn;
      LinearLayout okBtn = rootView.findViewById(id);
      if (okBtn == null) {
        break missingId;
      }

      id = R.id.toolbar;
      CardView toolbar = rootView.findViewById(id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivitySettingsBinding((RelativeLayout) rootView, backBtn, connectedCardLayout,
          currecySpinner, darkTheme, languageSpinner, menuBtn, okBtn, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
